/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ProjectMedia as PrismaProjectMedia,
  Project as PrismaProject,
} from "@prisma/client";

export class ProjectMediaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProjectMediaCountArgs, "select">
  ): Promise<number> {
    return this.prisma.projectMedia.count(args);
  }

  async projectMedias(
    args: Prisma.ProjectMediaFindManyArgs
  ): Promise<PrismaProjectMedia[]> {
    return this.prisma.projectMedia.findMany(args);
  }
  async projectMedia(
    args: Prisma.ProjectMediaFindUniqueArgs
  ): Promise<PrismaProjectMedia | null> {
    return this.prisma.projectMedia.findUnique(args);
  }
  async createProjectMedia(
    args: Prisma.ProjectMediaCreateArgs
  ): Promise<PrismaProjectMedia> {
    return this.prisma.projectMedia.create(args);
  }
  async updateProjectMedia(
    args: Prisma.ProjectMediaUpdateArgs
  ): Promise<PrismaProjectMedia> {
    return this.prisma.projectMedia.update(args);
  }
  async deleteProjectMedia(
    args: Prisma.ProjectMediaDeleteArgs
  ): Promise<PrismaProjectMedia> {
    return this.prisma.projectMedia.delete(args);
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.projectMedia
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}
