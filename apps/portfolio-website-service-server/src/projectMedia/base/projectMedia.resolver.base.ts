/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ProjectMedia } from "./ProjectMedia";
import { ProjectMediaCountArgs } from "./ProjectMediaCountArgs";
import { ProjectMediaFindManyArgs } from "./ProjectMediaFindManyArgs";
import { ProjectMediaFindUniqueArgs } from "./ProjectMediaFindUniqueArgs";
import { CreateProjectMediaArgs } from "./CreateProjectMediaArgs";
import { UpdateProjectMediaArgs } from "./UpdateProjectMediaArgs";
import { DeleteProjectMediaArgs } from "./DeleteProjectMediaArgs";
import { Project } from "../../project/base/Project";
import { ProjectMediaService } from "../projectMedia.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProjectMedia)
export class ProjectMediaResolverBase {
  constructor(
    protected readonly service: ProjectMediaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProjectMedia",
    action: "read",
    possession: "any",
  })
  async _projectMediasMeta(
    @graphql.Args() args: ProjectMediaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProjectMedia])
  @nestAccessControl.UseRoles({
    resource: "ProjectMedia",
    action: "read",
    possession: "any",
  })
  async projectMedias(
    @graphql.Args() args: ProjectMediaFindManyArgs
  ): Promise<ProjectMedia[]> {
    return this.service.projectMedias(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProjectMedia, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProjectMedia",
    action: "read",
    possession: "own",
  })
  async projectMedia(
    @graphql.Args() args: ProjectMediaFindUniqueArgs
  ): Promise<ProjectMedia | null> {
    const result = await this.service.projectMedia(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProjectMedia)
  @nestAccessControl.UseRoles({
    resource: "ProjectMedia",
    action: "create",
    possession: "any",
  })
  async createProjectMedia(
    @graphql.Args() args: CreateProjectMediaArgs
  ): Promise<ProjectMedia> {
    return await this.service.createProjectMedia({
      ...args,
      data: {
        ...args.data,

        project: args.data.project
          ? {
              connect: args.data.project,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProjectMedia)
  @nestAccessControl.UseRoles({
    resource: "ProjectMedia",
    action: "update",
    possession: "any",
  })
  async updateProjectMedia(
    @graphql.Args() args: UpdateProjectMediaArgs
  ): Promise<ProjectMedia | null> {
    try {
      return await this.service.updateProjectMedia({
        ...args,
        data: {
          ...args.data,

          project: args.data.project
            ? {
                connect: args.data.project,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProjectMedia)
  @nestAccessControl.UseRoles({
    resource: "ProjectMedia",
    action: "delete",
    possession: "any",
  })
  async deleteProjectMedia(
    @graphql.Args() args: DeleteProjectMediaArgs
  ): Promise<ProjectMedia | null> {
    try {
      return await this.service.deleteProjectMedia(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProjectMedia)
  async uploadMediaUrl(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: ProjectMediaFindUniqueArgs
  ): Promise<ProjectMedia> {
    return await this.service.uploadMediaUrl(args, file);
  }

  @graphql.Mutation(() => ProjectMedia)
  async deleteMediaUrl(
    @graphql.Args()
    args: ProjectMediaFindUniqueArgs
  ): Promise<ProjectMedia> {
    return await this.service.deleteMediaUrl(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Project, {
    nullable: true,
    name: "project",
  })
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  async getProject(
    @graphql.Parent() parent: ProjectMedia
  ): Promise<Project | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
