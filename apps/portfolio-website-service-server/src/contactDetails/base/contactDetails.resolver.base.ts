/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ContactDetails } from "./ContactDetails";
import { ContactDetailsCountArgs } from "./ContactDetailsCountArgs";
import { ContactDetailsFindManyArgs } from "./ContactDetailsFindManyArgs";
import { ContactDetailsFindUniqueArgs } from "./ContactDetailsFindUniqueArgs";
import { CreateContactDetailsArgs } from "./CreateContactDetailsArgs";
import { UpdateContactDetailsArgs } from "./UpdateContactDetailsArgs";
import { DeleteContactDetailsArgs } from "./DeleteContactDetailsArgs";
import { ContactDetailsService } from "../contactDetails.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ContactDetails)
export class ContactDetailsResolverBase {
  constructor(
    protected readonly service: ContactDetailsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ContactDetails",
    action: "read",
    possession: "any",
  })
  async _contactDetailsItemsMeta(
    @graphql.Args() args: ContactDetailsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ContactDetails])
  @nestAccessControl.UseRoles({
    resource: "ContactDetails",
    action: "read",
    possession: "any",
  })
  async contactDetailsItems(
    @graphql.Args() args: ContactDetailsFindManyArgs
  ): Promise<ContactDetails[]> {
    return this.service.contactDetailsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ContactDetails, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ContactDetails",
    action: "read",
    possession: "own",
  })
  async contactDetails(
    @graphql.Args() args: ContactDetailsFindUniqueArgs
  ): Promise<ContactDetails | null> {
    const result = await this.service.contactDetails(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContactDetails)
  @nestAccessControl.UseRoles({
    resource: "ContactDetails",
    action: "create",
    possession: "any",
  })
  async createContactDetails(
    @graphql.Args() args: CreateContactDetailsArgs
  ): Promise<ContactDetails> {
    return await this.service.createContactDetails({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContactDetails)
  @nestAccessControl.UseRoles({
    resource: "ContactDetails",
    action: "update",
    possession: "any",
  })
  async updateContactDetails(
    @graphql.Args() args: UpdateContactDetailsArgs
  ): Promise<ContactDetails | null> {
    try {
      return await this.service.updateContactDetails({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContactDetails)
  @nestAccessControl.UseRoles({
    resource: "ContactDetails",
    action: "delete",
    possession: "any",
  })
  async deleteContactDetails(
    @graphql.Args() args: DeleteContactDetailsArgs
  ): Promise<ContactDetails | null> {
    try {
      return await this.service.deleteContactDetails(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
