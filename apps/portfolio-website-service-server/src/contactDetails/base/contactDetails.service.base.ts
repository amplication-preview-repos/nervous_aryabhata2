/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ContactDetails as PrismaContactDetails } from "@prisma/client";

export class ContactDetailsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContactDetailsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.contactDetails.count(args);
  }

  async contactDetailsItems(
    args: Prisma.ContactDetailsFindManyArgs
  ): Promise<PrismaContactDetails[]> {
    return this.prisma.contactDetails.findMany(args);
  }
  async contactDetails(
    args: Prisma.ContactDetailsFindUniqueArgs
  ): Promise<PrismaContactDetails | null> {
    return this.prisma.contactDetails.findUnique(args);
  }
  async createContactDetails(
    args: Prisma.ContactDetailsCreateArgs
  ): Promise<PrismaContactDetails> {
    return this.prisma.contactDetails.create(args);
  }
  async updateContactDetails(
    args: Prisma.ContactDetailsUpdateArgs
  ): Promise<PrismaContactDetails> {
    return this.prisma.contactDetails.update(args);
  }
  async deleteContactDetails(
    args: Prisma.ContactDetailsDeleteArgs
  ): Promise<PrismaContactDetails> {
    return this.prisma.contactDetails.delete(args);
  }
}
