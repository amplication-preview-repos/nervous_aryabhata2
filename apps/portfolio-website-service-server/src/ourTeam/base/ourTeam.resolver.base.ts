/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OurTeam } from "./OurTeam";
import { OurTeamCountArgs } from "./OurTeamCountArgs";
import { OurTeamFindManyArgs } from "./OurTeamFindManyArgs";
import { OurTeamFindUniqueArgs } from "./OurTeamFindUniqueArgs";
import { CreateOurTeamArgs } from "./CreateOurTeamArgs";
import { UpdateOurTeamArgs } from "./UpdateOurTeamArgs";
import { DeleteOurTeamArgs } from "./DeleteOurTeamArgs";
import { OurTeamService } from "../ourTeam.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OurTeam)
export class OurTeamResolverBase {
  constructor(
    protected readonly service: OurTeamService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OurTeam",
    action: "read",
    possession: "any",
  })
  async _ourTeamsMeta(
    @graphql.Args() args: OurTeamCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OurTeam])
  @nestAccessControl.UseRoles({
    resource: "OurTeam",
    action: "read",
    possession: "any",
  })
  async ourTeams(
    @graphql.Args() args: OurTeamFindManyArgs
  ): Promise<OurTeam[]> {
    return this.service.ourTeams(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OurTeam, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OurTeam",
    action: "read",
    possession: "own",
  })
  async ourTeam(
    @graphql.Args() args: OurTeamFindUniqueArgs
  ): Promise<OurTeam | null> {
    const result = await this.service.ourTeam(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OurTeam)
  @nestAccessControl.UseRoles({
    resource: "OurTeam",
    action: "create",
    possession: "any",
  })
  async createOurTeam(
    @graphql.Args() args: CreateOurTeamArgs
  ): Promise<OurTeam> {
    return await this.service.createOurTeam({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OurTeam)
  @nestAccessControl.UseRoles({
    resource: "OurTeam",
    action: "update",
    possession: "any",
  })
  async updateOurTeam(
    @graphql.Args() args: UpdateOurTeamArgs
  ): Promise<OurTeam | null> {
    try {
      return await this.service.updateOurTeam({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OurTeam)
  @nestAccessControl.UseRoles({
    resource: "OurTeam",
    action: "delete",
    possession: "any",
  })
  async deleteOurTeam(
    @graphql.Args() args: DeleteOurTeamArgs
  ): Promise<OurTeam | null> {
    try {
      return await this.service.deleteOurTeam(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OurTeam)
  async uploadImage(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: OurTeamFindUniqueArgs
  ): Promise<OurTeam> {
    return await this.service.uploadImage(args, file);
  }

  @graphql.Mutation(() => OurTeam)
  async deleteImage(
    @graphql.Args()
    args: OurTeamFindUniqueArgs
  ): Promise<OurTeam> {
    return await this.service.deleteImage(args);
  }
}
