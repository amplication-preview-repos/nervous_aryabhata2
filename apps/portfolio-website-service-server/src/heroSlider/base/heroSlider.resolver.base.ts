/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { HeroSlider } from "./HeroSlider";
import { HeroSliderCountArgs } from "./HeroSliderCountArgs";
import { HeroSliderFindManyArgs } from "./HeroSliderFindManyArgs";
import { HeroSliderFindUniqueArgs } from "./HeroSliderFindUniqueArgs";
import { CreateHeroSliderArgs } from "./CreateHeroSliderArgs";
import { UpdateHeroSliderArgs } from "./UpdateHeroSliderArgs";
import { DeleteHeroSliderArgs } from "./DeleteHeroSliderArgs";
import { HeroSliderService } from "../heroSlider.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HeroSlider)
export class HeroSliderResolverBase {
  constructor(
    protected readonly service: HeroSliderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HeroSlider",
    action: "read",
    possession: "any",
  })
  async _heroSlidersMeta(
    @graphql.Args() args: HeroSliderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HeroSlider])
  @nestAccessControl.UseRoles({
    resource: "HeroSlider",
    action: "read",
    possession: "any",
  })
  async heroSliders(
    @graphql.Args() args: HeroSliderFindManyArgs
  ): Promise<HeroSlider[]> {
    return this.service.heroSliders(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HeroSlider, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HeroSlider",
    action: "read",
    possession: "own",
  })
  async heroSlider(
    @graphql.Args() args: HeroSliderFindUniqueArgs
  ): Promise<HeroSlider | null> {
    const result = await this.service.heroSlider(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HeroSlider)
  @nestAccessControl.UseRoles({
    resource: "HeroSlider",
    action: "create",
    possession: "any",
  })
  async createHeroSlider(
    @graphql.Args() args: CreateHeroSliderArgs
  ): Promise<HeroSlider> {
    return await this.service.createHeroSlider({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HeroSlider)
  @nestAccessControl.UseRoles({
    resource: "HeroSlider",
    action: "update",
    possession: "any",
  })
  async updateHeroSlider(
    @graphql.Args() args: UpdateHeroSliderArgs
  ): Promise<HeroSlider | null> {
    try {
      return await this.service.updateHeroSlider({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HeroSlider)
  @nestAccessControl.UseRoles({
    resource: "HeroSlider",
    action: "delete",
    possession: "any",
  })
  async deleteHeroSlider(
    @graphql.Args() args: DeleteHeroSliderArgs
  ): Promise<HeroSlider | null> {
    try {
      return await this.service.deleteHeroSlider(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HeroSlider)
  async uploadImage(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: HeroSliderFindUniqueArgs
  ): Promise<HeroSlider> {
    return await this.service.uploadImage(args, file);
  }

  @graphql.Mutation(() => HeroSlider)
  async deleteImage(
    @graphql.Args()
    args: HeroSliderFindUniqueArgs
  ): Promise<HeroSlider> {
    return await this.service.deleteImage(args);
  }
}
